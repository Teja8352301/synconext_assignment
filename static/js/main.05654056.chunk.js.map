{"version":3,"sources":["components/TimeItem/TimeItem.module.css","container/Main/Main.module.css","container/KeyboardPickers/KeyboardPickers.js","components/Heading/Heading.js","components/TimeItem/TimeItem.js","container/TimeItems/TimeItems.js","components/Recognise/Recognise.js","container/Main/Main.js","App.js","reportWebVitals.js","index.js","container/KeyboardPickers/KeyboardPickers.module.css","components/Recognise/Recognise.module.css","container/TimeItems/TimeItems.module.css"],"names":["module","exports","KeyboardPickers","props","className","classes","Grid_Outer","utils","MomentUtils","Grid_Inner","Span","clearable","value","dateTimeObject","updateDateObj","selectedDate","initialDateAndTimeObj","placeholder","onChange","date","changeDate","format","keyboardIcon","color","mask","updateTimeObj","selectedTime","changeTime","updateDurationObj","selectedDuration","type","event","changeDuration","style","maxWidth","fontSize","height","borderRadius","padding","border","backgroundColor","Button_Grid","Button","onClick","submittionData","Heading","children","TimeItem","bgColor","TimeItems","items","data","map","val","index","dateMonthYear","_d","getDate","month","getMonth","year","getFullYear","availability","start","hours","minutes","timeStamp","TimeItems_Inner","Recognise","RecoDiv","RecongiseSpan","Main","newEndDate","newStartDate","newDateArray","objectDateArray","initialDateAndTime","Date","useState","handleDateChange","handleTimeChange","handleDurationChange","updateDate","setUpdateDate","updateTime","setUpdateTime","updateDuration","setUpdateDuration","dataNewState","setDataNewState","newStartDateUpdate","setNewStartDateUpdate","count","setCount","dateTimeObj","end","dataState","setDataState","useEffect","getTime","conditionCheck","newDateArraying","reduce","prev","next","toUTCString","splice","length","getHours","alert","amToPm","dateObject","monthObject","yearObject","startHours","startMinutes","startTimeStamp","endHours","endMinutes","endTimeStamp","avail","push","sorting","dateArray","sort","x","y","dataArray","dateObj","monthObj","yearObj","startHour","endHour","startMinute","endMinute","startStamp","endStamp","forEach","i","toString","padStart","getMinutes","railWayToNormal","setHours","setMinutes","time","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StyledEngineProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.05654056.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimeItem\":\"TimeItem_TimeItem__3m9d_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main_Main__2MEaX\"};","import React, { useState } from \"react\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport { KeyboardDatePicker, KeyboardTimePicker } from \"@material-ui/pickers\";\r\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\r\nimport EventIcon from \"@material-ui/icons/Event\";\r\nimport classes from \"./KeyboardPickers.module.css\";\r\n\r\nexport const KeyboardPickers = props => {\r\n  return (\r\n    <div className={classes.Grid_Outer}>\r\n      <MuiPickersUtilsProvider utils={MomentUtils}>\r\n        <div className={classes.Grid_Inner}>\r\n          <div>\r\n            <p>\r\n              Date <span className={classes.Span}>*</span>\r\n            </p>\r\n            <KeyboardDatePicker\r\n              clearable\r\n              value={\r\n                props.dateTimeObject.updateDateObj\r\n                  ? props.selectedDate\r\n                  : props.dateTimeObject.initialDateAndTimeObj\r\n              }\r\n              placeholder=\"Enter the Date\"\r\n              onChange={date => props.changeDate(date)}\r\n              format=\"DD/MM/YYYY\"\r\n              keyboardIcon={<EventIcon color=\"primary\" />}\r\n            />\r\n          </div>\r\n          <div>\r\n            <p>\r\n              Start Time <span className={classes.Span}>*</span>\r\n            </p>\r\n            <KeyboardTimePicker\r\n              placeholder=\"Enter Time\"\r\n              mask=\"__:__ _M\"\r\n              value={\r\n                props.dateTimeObject.updateTimeObj\r\n                  ? props.selectedTime\r\n                  : props.dateTimeObject.initialDateAndTimeObj\r\n              }\r\n              onChange={date => props.changeTime(date)}\r\n              keyboardIcon={<AccessTimeIcon color=\"primary\" />}\r\n            />\r\n          </div>\r\n          <div>\r\n            <p>\r\n              Duration <span className={classes.Span}>*</span>\r\n              <span>in mins</span>\r\n            </p>\r\n\r\n            <input\r\n              value={\r\n                props.dateTimeObject.updateDurationObj\r\n                  ? props.selectedDuration\r\n                  : 0\r\n              }\r\n              type=\"number\"\r\n              onChange={event => {\r\n                props.changeDuration(event);\r\n              }}\r\n              placeholder=\"0\"\r\n              style={{\r\n                maxWidth: \"240px\",\r\n                fontSize: \"20px\",\r\n                height: \"20px\",\r\n                borderRadius: \"4px\",\r\n                padding: \"16.5px 14px\",\r\n                border: \"1px solid grey\",\r\n                backgroundColor: \"white\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </MuiPickersUtilsProvider>\r\n      <div className={classes.Button_Grid}>\r\n        <button\r\n          className={classes.Button}\r\n          onClick={event => props.submittionData(event)}\r\n        >\r\n          SUBMIT\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Heading = props => {\r\n  return (\r\n    <div>\r\n      <h3>{props.children}</h3>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport classes from \"./TimeItem.module.css\";\r\nexport const TimeItem = props => {\r\n  return (\r\n    <h4 className={classes.TimeItem} style={{ backgroundColor: props.bgColor }}>\r\n      {props.children}\r\n    </h4>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport classes from \"./TimeItems.module.css\";\r\nimport { TimeItem } from \"../../components/TimeItem/TimeItem\";\r\nexport const TimeItems = props => {\r\n  let items = <h5>Please select the Date</h5>;\r\n  if (props.date) {\r\n    items = props.data.map((val, index) => {\r\n      if (\r\n        val.dateMonthYear.date == props.date._d.getDate() &&\r\n        val.dateMonthYear.month == props.date._d.getMonth() &&\r\n        val.dateMonthYear.year == props.date._d.getFullYear()\r\n      ) {\r\n        let bgColor = \"\";\r\n        bgColor = val.availability ? \"green\" : \"grey\";\r\n        return (\r\n          <div key={index}>\r\n            <TimeItem\r\n              bgColor={bgColor}\r\n            >{`${val.start.hours}:${val.start.minutes} ${val.start.timeStamp}\r\n          `}</TimeItem>\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className={classes.TimeItems}>\r\n      <h4\r\n        style={{\r\n          backgroundColor: \"yellow\",\r\n          padding: \"10px\",\r\n          borderRadius: \"10px\",\r\n        }}\r\n      >\r\n        Events of the Day:\r\n      </h4>\r\n      <div className={classes.TimeItems_Inner}>{items}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport classes from \"./Recognise.module.css\";\r\nexport const Recognise = () => {\r\n  return (\r\n    <div className={classes.RecoDiv}>\r\n      <div className={classes.RecoDiv}>\r\n        <span\r\n          className={classes.RecongiseSpan}\r\n          style={{ backgroundColor: \"grey\" }}\r\n        ></span>\r\n        <h5>Busy</h5>\r\n      </div>\r\n      <div className={classes.RecoDiv}>\r\n        <span\r\n          className={classes.RecongiseSpan}\r\n          style={{ backgroundColor: \"green\" }}\r\n        ></span>\r\n        <h5>Free</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { KeyboardPickers } from \"../KeyboardPickers/KeyboardPickers\";\r\nimport { Heading } from \"../../components/Heading/Heading\";\r\nimport { TimeItems } from \"../TimeItems/TimeItems\";\r\nimport classes from \"./Main.module.css\";\r\nimport { Recognise } from \"../../components/Recognise/Recognise\";\r\nexport const Main = () => {\r\n  let newDateArray = [];\r\n  let objectDateArray = [];\r\n\r\n  //-------------------------------------------------\r\n  let initialDateAndTime = new Date(\"03/03/2021\");\r\n  const [selectedDate, handleDateChange] = useState(null);\r\n  const [selectedTime, handleTimeChange] = useState(null);\r\n  const [selectedDuration, handleDurationChange] = useState(0);\r\n  ////////////////////////////\r\n  const [updateDate, setUpdateDate] = useState(false);\r\n  const [updateTime, setUpdateTime] = useState(false);\r\n  const [updateDuration, setUpdateDuration] = useState(false);\r\n  const [dataNewState, setDataNewState] = useState(false);\r\n  const [newStartDateUpdate, setNewStartDateUpdate] = useState(null);\r\n  let [count, setCount] = useState(0);\r\n\r\n  let dateTimeObj = {\r\n    updateDateObj: updateDate,\r\n    updateTimeObj: updateTime,\r\n    updateDurationObj: updateDuration,\r\n    initialDateAndTimeObj: initialDateAndTime,\r\n  };\r\n  //--------------------------------------------------\r\n  let [dataState, setDataState] = useState([\r\n    {\r\n      start: \"Wed, 03 Mar 2021 04:00:15 GMT\",\r\n      end: \"Wed, 03 Mar 2021 05:00:15 GMT\",\r\n    },\r\n    {\r\n      start: \"Wed, 03 Mar 2021 06:00:15 GMT\",\r\n      end: \"Wed, 03 Mar 2021 06:30:15 GMT\",\r\n    },\r\n    {\r\n      start: \"Wed, 03 Mar 2021 08:30:15 GMT\",\r\n      end: \"Wed, 03 Mar 2021 09:30:15 GMT\",\r\n    },\r\n    {\r\n      start: \"Wed, 03 Mar 2021 09:30:15 GMT\",\r\n      end: \"Wed, 03 Mar 2021 09:50:15 GMT\",\r\n    },\r\n    {\r\n      start: \"Wed, 03 Mar 2021 12:50:15 GMT\",\r\n      end: \"Wed, 03 Mar 2021 13:10:15 GMT\",\r\n    },\r\n    {\r\n      start: \"Wed, 03 Mar 2021 11:30:15 GMT\",\r\n      end: \"Wed, 03 Mar 2021 12:15:15 GMT\",\r\n    },\r\n    {\r\n      start: \"Wed, 03 Mar 2021 13:30:15 GMT\",\r\n      end: \"Wed, 03 Mar 2021 14:00:15 GMT\",\r\n    },\r\n    {\r\n      start: \"Wed, 03 Mar 2021 15:00:15 GMT\",\r\n      end: \"Wed, 03 Mar 2021 15:30:15 GMT\",\r\n    },\r\n    {\r\n      start: \"Wed, 04 Mar 2021 15:00:15 GMT\",\r\n      end: \"Wed, 04 Mar 2021 15:30:15 GMT\",\r\n    },\r\n    {\r\n      start: \"Wed, 04 Mar 2021 04:00:15 GMT\",\r\n      end: \"Wed, 04 Mar 2021 05:00:15 GMT\",\r\n    },\r\n  ]);\r\n\r\n  let newEndDate;\r\n  let newStartDate;\r\n  // ---------------TO RERENDER THE DATE DATA IN THE UI------------- //\r\n  useEffect(() => {\r\n    if (dataNewState) {\r\n      newStartDate = newStartDateUpdate;\r\n      newEndDate = new Date(\r\n        new Date(newStartDateUpdate).getTime() + selectedDuration * 60000\r\n      );\r\n      conditionCheck(objectDateArray);\r\n    }\r\n    return () => {\r\n      setUpdateDate(false);\r\n      setUpdateTime(false);\r\n      setUpdateDuration(false);\r\n    };\r\n  }, [dataState, newStartDateUpdate]);\r\n\r\n  //------------DATE CHANGE--------------------//\r\n  const changeDate = date => {\r\n    handleDateChange(date);\r\n    setUpdateDate(true);\r\n    if (selectedTime && updateTime) {\r\n      date._d.setHours(selectedTime._d.getHours());\r\n      date._d.setMinutes(selectedTime._d.getMinutes());\r\n    }\r\n  };\r\n  //--------------TIME CHANGE------------//\r\n  const changeTime = time => {\r\n    handleTimeChange(time);\r\n    setUpdateTime(true);\r\n    if (selectedDate && updateDate) {\r\n      selectedDate._d.setHours(time._d.getHours());\r\n      selectedDate._d.setMinutes(time._d.getMinutes());\r\n      handleDateChange(selectedDate);\r\n    }\r\n  };\r\n  //---------------DURATION CHANGE-----------//\r\n  const changeDuration = event => {\r\n    setUpdateDuration(true);\r\n    handleDurationChange(event.target.value);\r\n  };\r\n\r\n  //------------------checking condition----------------//\r\n\r\n  const conditionCheck = newDateArray => {\r\n    let newDateArraying = newDateArray;\r\n    newDateArraying.reduce((prev, next, index) => {\r\n      if (\r\n        prev.end.getTime() <= newStartDate.getTime() &&\r\n        next.start.getTime() >= newEndDate.getTime()\r\n      ) {\r\n        setCount(count => {\r\n          return count + 1;\r\n        });\r\n        setDataState([\r\n          ...dataState,\r\n          {\r\n            start: new Date(\r\n              newStartDate.getTime() + 3600000 * 5.5\r\n            ).toUTCString(),\r\n            end: new Date(newEndDate.getTime() + 3600000 * 5.5).toUTCString(),\r\n            availability: true,\r\n          },\r\n        ]);\r\n        setNewStartDateUpdate(newEndDate);\r\n        setDataNewState(true);\r\n        newDateArraying.splice(index, newDateArraying.length);\r\n        return next;\r\n      } else {\r\n        if (newStartDate.getHours() === 15) {\r\n          newDateArraying.splice(index, newDateArraying.length);\r\n        }\r\n        if (newStartDate.getTime() <= prev.start.getTime()) {\r\n          setNewStartDateUpdate(newDateArraying[index - 1].end);\r\n          newDateArraying.splice(index, newDateArraying.length);\r\n          setDataNewState(true);\r\n        }\r\n        if (index + 1 === newDateArraying.length && count === 0) {\r\n          alert(\"NO FREE TIME AVAILABLE\");\r\n        }\r\n        return next;\r\n      }\r\n    });\r\n  };\r\n  //-------------DATA SUBMITTION----------------//\r\n  const dataSubmittion = event => {\r\n    setCount(count => {\r\n      return 0;\r\n    });\r\n    if (updateDate && updateTime && updateDuration) {\r\n      newStartDate = new Date(selectedDate._d);\r\n      newEndDate = new Date(\r\n        new Date(selectedDate._d).getTime() + selectedDuration * 60000\r\n      );\r\n      conditionCheck(objectDateArray);\r\n    } else {\r\n      alert(\"Enter The Required Data\");\r\n    }\r\n  };\r\n\r\n  //---------------24HRS TO 12 HRS Conversion-------------------//\r\n\r\n  const railWayToNormal = dataArray => {\r\n    let dateObj = 0;\r\n    let monthObj = 0;\r\n    let yearObj = 0;\r\n    let startHour = 0;\r\n    let endHour = 0;\r\n    let startMinute = 0;\r\n    let endMinute = 0;\r\n    let startStamp = \"\";\r\n    let endStamp = \"\";\r\n\r\n    dataArray.forEach((val, index) => {\r\n      dateObj = val.start.getDate();\r\n      monthObj = val.start.getMonth();\r\n      yearObj = val.start.getFullYear();\r\n      let avail = val.availability ? true : false;\r\n      for (var i in val) {\r\n        if (i !== \"availability\")\r\n          if (val[i].getHours() == 12) {\r\n            if (i === \"start\") {\r\n              startHour = val[i].getHours().toString().padStart(2, \"0\");\r\n              startMinute = val[i].getMinutes().toString().padStart(2, \"0\");\r\n              startStamp = \"PM\";\r\n            } else {\r\n              endHour = val[i].getHours().toString().padStart(2, \"0\");\r\n              endMinute = val[i].getMinutes().toString().padStart(2, \"0\");\r\n              endStamp = \"PM\";\r\n            }\r\n          } else if (val[i].getHours() > 12) {\r\n            if (i === \"start\") {\r\n              startHour = (val[i].getHours() - 12).toString().padStart(2, \"0\");\r\n              startMinute = val[i].getMinutes().toString().padStart(2, \"0\");\r\n              startStamp = \"PM\";\r\n            } else {\r\n              endHour = (val[i].getHours() - 12).toString().padStart(2, \"0\");\r\n              endMinute = val[i].getMinutes().toString().padStart(2, \"0\");\r\n              endStamp = \"PM\";\r\n            }\r\n          } else {\r\n            if (i === \"start\") {\r\n              startHour = val[i].getHours().toString().padStart(2, \"0\");\r\n              startMinute = val[i].getMinutes().toString().padStart(2, \"0\");\r\n              startStamp = \"AM\";\r\n            } else {\r\n              endHour = val[i].getHours();\r\n              endMinute = val[i].getMinutes();\r\n              endStamp = \"AM\";\r\n            }\r\n          }\r\n      }\r\n      amToPm(\r\n        dateObj,\r\n        monthObj,\r\n        yearObj,\r\n        startHour,\r\n        startMinute,\r\n        startStamp,\r\n        endHour,\r\n        endMinute,\r\n        endStamp,\r\n        avail\r\n      );\r\n    });\r\n    // }\r\n  };\r\n  const amToPm = (\r\n    dateObject,\r\n    monthObject,\r\n    yearObject,\r\n    startHours,\r\n    startMinutes,\r\n    startTimeStamp,\r\n    endHours,\r\n    endMinutes,\r\n    endTimeStamp,\r\n    avail\r\n  ) => {\r\n    newDateArray.push({\r\n      start: {\r\n        hours: startHours,\r\n        minutes: startMinutes,\r\n        timeStamp: startTimeStamp,\r\n      },\r\n      end: {\r\n        hours: endHours,\r\n        minutes: endMinutes,\r\n        timeStamp: endTimeStamp,\r\n      },\r\n      availability: avail,\r\n      dateMonthYear: {\r\n        date: dateObject,\r\n        month: monthObject,\r\n        year: yearObject,\r\n      },\r\n    });\r\n  };\r\n\r\n  //---------------Sort ArrayData--------------//\r\n  const sorting = dateArray => {\r\n    dateArray.sort(function (x, y) {\r\n      if (x.start.getTime() > y.start.getTime()) {\r\n        return 1;\r\n      } else {\r\n        return -1;\r\n      }\r\n    });\r\n    objectDateArray = dateArray;\r\n    railWayToNormal(dateArray);\r\n  };\r\n  //----------DATE TO OBJECT ARRAY------------//\r\n  let dateArray = null;\r\n  const dateToObj = dataArray => {\r\n    dateArray = dataArray.map(val => {\r\n      let avail = val.availability ? true : false;\r\n      return {\r\n        start: new Date(new Date(val.start).getTime() - 3600000 * 5.5),\r\n        end: new Date(new Date(val.end).getTime() - 3600000 * 5.5),\r\n        availability: avail,\r\n      };\r\n    });\r\n    sorting(dateArray);\r\n  };\r\n  dateToObj(dataState);\r\n\r\n  return (\r\n    <div className={classes.Main}>\r\n      <Heading>FIND A FREE TIME</Heading>\r\n      <KeyboardPickers\r\n        changeDate={changeDate}\r\n        changeTime={changeTime}\r\n        changeDuration={changeDuration}\r\n        selectedDate={selectedDate}\r\n        selectedDuration={selectedDuration}\r\n        selectedTime={selectedTime}\r\n        submittionData={dataSubmittion}\r\n        dateTimeObject={dateTimeObj}\r\n      />\r\n      <TimeItems\r\n        data={newDateArray}\r\n        date={selectedDate ? selectedDate : null}\r\n      />\r\n      <Recognise />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport { Main } from \"./container/Main/Main\";\nfunction App() {\n  const [selectedDate, handleDateChange] = useState(new Date());\n  return <Main />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport StyledEngineProvider from \"@material-ui/core/StyledEngineProvider\";\n\nReactDOM.render(\n  <StyledEngineProvider injectFirst>\n    <App />\n  </StyledEngineProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Grid_Outer\":\"KeyboardPickers_Grid_Outer__2UQDs\",\"Button\":\"KeyboardPickers_Button__1BloT\",\"Grid_Inner\":\"KeyboardPickers_Grid_Inner__KUM0_\",\"Button_Grid\":\"KeyboardPickers_Button_Grid__2NT8J\",\"Span\":\"KeyboardPickers_Span__WkWA3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RecongiseSpan\":\"Recognise_RecongiseSpan__2uzTs\",\"RecoDiv\":\"Recognise_RecoDiv__1TS8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimeItems\":\"TimeItems_TimeItems__S0d9s\",\"TimeItems_Inner\":\"TimeItems_TimeItems_Inner__3jKZa\"};"],"sourceRoot":""}